<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAEAIB8AAAEAIAAkEAAAFgAAACgAAAAgAAAAPgAAAAEAIAAAAAAAgA8AABILAAASCwAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAJeD+AACH/gAg2/4HFdr+CwXt/QplgnkKi0gtCYZHMQnTmycH4qslB+GqJQjhqiUI4aolCOGq
        JQnhqiUJ4aolCeGqJQnhqiUK4qojCtCxPgo3294MAN7/CADe/wAA4f8AAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAADbv/wAW0v4ALuf/PiLe/7Eb0vjFUJSdwYlaPcGZWy3AxIopvuCpJbrhqiW54aolvOGq
        JbzhqiW84aolveGqJb/hqiW/4aolv+GqJcHhqiXC36sowra1WMVovqe6IcPqZALA/wgQwP8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAOPH/ADrz/xQx6v/KIuD//0CsvP+KWjv/kFIu/7N4K//hqiX/4aol/+Gq
        Jf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aok/9esMP+DtYr4J7n0cFDi
        kAAqsvoAAAAAAAAAAAAAAAAAAAAAAAAAAAA48f8AOvL/GTHq/9Yi4P//V5WX/5RQK/+RUi//n2Mt/8+W
        J//iqyX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4qoj/9Gr
        OP9UssnTHbD/GTKv9QAAAAAAAAAAAAAAAAAAAAAAAAAAADbv/wC+//8ALuj/fSPf//0pxOP/bHlu/5JT
        Lv+QUi//nF8u/8mQKP3hqyXx4aol7uGqJezhqiXq4aol6eGqJefhqiXo4aol6uGqJezhqiXw4aol9eGq
        JfvhqiX/4qok/32um/onrP9VLa76ADWj9wAAAAAAAAAAAAAAAAAAAAAAAAAAACnk/gAs5v4RId3+qRfW
        //8dxO3/X4KA/5BUMf+RUi7/l1ku+65yK5bfqCU046wlLeGqJSrhqiUp4aolJ+GqJSjhqiUq4aolLeGq
        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
        L/+RUy/JkVMvMZFTLwCRUy8AAAAAAAAAAAAAAAAAAAAAAAAAAADhqiUA4aolI+GqJeHhqiX/4aol/+Gq
        Jf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/46si/8ejR/9og7z/O2zy/0Rf
        3P92U2v/klMu/5FTL/+RUy/RkVMvOZFTLwCRUy8AAAAAAAAAAAAAAAAAAAAAAOGqJQDhqiUD4aolleGq
        Jf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/46sj/9Ck
        O/9le77/OV/y/0dQ0v+DUU3/klMt/5FTL/+RUy/AkVMvDpFTLwAAAAAAAAAAAAAAAAAAAAAA4aolAOGq
        JQDhqiUi4aolvuGqJf7hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+GqJf/hqiX/4aol/+Gq
        Jf/hqiX/2acw/3aBqv85X/H/QU/e/3xQXP+SUyz/kVMv/5FTL7eRUy8NkVMvAAAAAAAAAAAAAAAAAAAA
        AAAAAAAA4aolAOGqJQDhqiUa4aolW+GqJWrhqiVp4aolaeGqJWnhqiVp4aolaeGqJWnhqiVp4aolaeGq
        JWnhqiVp4aolad+qKGmilnZrTHLfbD9h62xeVKRujVM5b5JULm2RUy9gkVMvIZFTLwCRUy8AAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAP/////////////////////////////////////wAAD/4AAAP8AAAD/AAAAf4AAAH+AA
        AA/wA/8B+AH/wfwA///+AH///wA////AH///4Af///AD///4Af///AD///4Af+AAAD/gAAAf4AAAD+AA
        AAfwAAAH+AAAD/////8=
</value>
  </data>
</root>